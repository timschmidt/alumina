use anyhow::Result;
use core::str;
use embedded_svc::{http::Method, http::Headers, io::Write};
use esp_idf_hal::{
    i2c::{I2cConfig, I2cDriver},
    prelude::*,
    gpio::OutputPin
};
use esp_idf_svc::{
    eventloop::EspSystemEventLoop,
    http::server::{Configuration, EspHttpServer},
    tls::X509,
};
use shtcx::{self, shtc3, PowerMode};
use std::{
    sync::{Arc, Mutex},
    thread::sleep,
    time::Duration,
    collections::HashMap,
    ffi::CStr,
};
use embedded_svc::io::Read;
use wifi::wifi;
// If using the `binstart` feature of `esp-idf-sys`, always keep this module imported
use esp_idf_sys as _;

#[toml_cfg::toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

pub struct Movement {
    vectors: Vec<i32>, // Reduced vectors for each axis
    cycles: i32,       // Number of cycles to repeat
}

pub struct MotionPlanner {
    movements: Vec<Movement>,
    // Other fields as needed
}

pub enum MotorType {
    Stepper { step_angle: f32, gear_ratio: f32 },
    Servo { max_speed: f32, torque: f32 },
}

pub enum ToolType {
    Extruder { temp_sensor: TemperatureSensor, material: String },
    Laser { power: f32, max_power: f32, min_power: f32, pulse_duration: u32, pulses_per_pm: f32, mode: String},
    PlasmaCutter { power: f32, max_power: f32, min_power: f32, pierce_delay: f32, cut_height: f32, hop_distance: f32, gas_type: String },
    Mill { spindle_speed: f32, max_spindle_speed: f32, min_spindle_speed: f32, direction: String, material: String },
    Heater { temp_sensor: TemperatureSensor, temperature: f32, max_temp: f32, min_temp: f32 },
}

pub struct Axis {
    motor_type: MotorType,
    endstops: HashMap<String, Endstop>,
    axis_position: f32, // Machine Coordinate
}

pub struct Endstop {
    start: bool,
    end: bool,
    pin: u32,
    inverted: bool,
    pullup: bool,
}

pub struct TemperatureSensor {
    current_temperature: f32,
    target_temperature: f32,
}

pub struct Camera {
    resolution: (u32, u32),
    fps: u32,
}

pub struct CNCMachineState {
    pub axes: HashMap<String, Axis>, // up to 12 axes
    pub toolheads: HashMap<String, ToolType>, // multiple toolheads
    pub workpiece_coordinates: (f32, f32, f32), // Workpiece coordinates
    pub sensors: HashMap<String, Sensor>,
    pub peripherals: HashMap<String, Peripheral>,
    pub pendant: Pendant,
    pub endstops: HashMap<String, Endstop>,
    pub fan_speed: f64,
    pub feedrate: f64,
    pub relative_mode: bool,
}

pub enum Sensor {
    ToolHeight { height: f32 },
    Temperature(TemperatureSensor),
    Camera(Camera),
    CoolantFlow { rate: f32 },
    AirFlow { speed: f32 },
}

pub enum Peripheral {
    Status(String),
    Activation(String),
    Deactivation(String),
}

pub struct Pendant {
    connected: bool,
    command: Option<PendantCommand>,
}

pub enum PendantCommand {
    Move { axis: String, distance: f32 },
    Stop,
    // other commands as needed
}

impl CNCMachineState {
    pub fn new() -> Self {
        Self {
            // Initialize state
            axes: HashMap::new(),
            toolheads: HashMap::new(),
            workpiece_coordinates: (0.0, 0.0, 0.0),
            sensors: HashMap::new(),
            peripherals: HashMap::new(),
            pendant: Pendant {
                connected: false,
                command: None,
            },
            endstops: HashMap::new(),
            fan_speed: 0.0,
            feedrate: 0.0,
            relative_mode: false,
        }
    }
}

impl MotionPlanner {
    pub fn new() -> Self {
        Self {
            movements: Vec::new(),
            // Initialize other fields
        }
    }

    pub fn plan_movement(&mut self, vectors: Vec<i32>) {
        // Calculate the greatest common divisor
        let gcd = vec_gcd(&vectors);

        // Divide each vector by the greatest common divisor to get reduced vectors
        //let reduced_vectors: Vec<i32> = vectors.into_iter().map(|v| v / gcd).collect();

        // Push the movement into the buffer
        //let movement = Movement {
        //    vectors: reduced_vectors,
        //    cycles: gcd,
        //};
        //self.movements.push(movement);
    }

    pub fn next_movement(&mut self) -> Option<Movement> {
        self.movements.pop()
    }
}

fn vec_gcd(numbers: &[i32]) -> i32 {
    // Function to calculate the greatest common divisor of the vectors
    //numbers.iter().fold(numbers[0], |acc, &x| gcd(acc, x))
    0
}

fn main() -> Result<()> {
    esp_idf_sys::link_patches();
    esp_idf_svc::log::EspLogger::initialize_default();

    let peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take()?;

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    // Connect to the Wi-Fi network
    let _wifi = wifi(
        app_config.wifi_ssid,
        app_config.wifi_psk,
        peripherals.modem,
        sysloop,
    )?;

    // Initialize temperature sensor
    let sda = peripherals.pins.gpio10;
    let scl = peripherals.pins.gpio8;
    let i2c = peripherals.i2c0;
    let config = I2cConfig::new().baudrate(100.kHz().into());
    let i2c = I2cDriver::new(i2c, sda, scl, &config)?;
    let status_led_main = Arc::new(Mutex::new(esp_idf_hal::gpio::PinDriver::output(peripherals.pins.gpio12)?));
    let status_led = status_led_main.clone();

    /*
    let temp_sensor_main = Arc::new(Mutex::new(shtc3(i2c)));
    let mut temp_sensor = temp_sensor_main.clone();
    temp_sensor
        .lock()
        .unwrap()
        .start_measurement(PowerMode::NormalMode)
        .unwrap();
     */

    // 1.Create a `EspHttpServer` instance using a default configuration
    let mut webserver_configuration: Configuration = Default::default();
    //webserver_configuration.server_certificate = Some(X509::pem(CStr::from_bytes_with_nul(include_bytes!("../public.pem")).unwrap()));
    //webserver_configuration.private_key = Some(X509::pem(CStr::from_bytes_with_nul(include_bytes!("../private.pem")).unwrap()));

    //let mut server = EspHttpServer::new(&Default::default())?;
    let mut server = EspHttpServer::new(&webserver_configuration)?;

    // 2. Write a handler that returns the index page
    server.fn_handler("/", Method::Get, |request| {
        let response = request.into_response(200, Some("OK"), &[("Content-Type", "text/html"), ("Content-Encoding", "gzip")]);
        //response?.write_all(include_bytes!("../../../docs/index.html.gz"))?;
        response?.write_all(include_bytes!("../../../docs/index.html.gz"))?;
        Ok(())
    })?;

    server.fn_handler("/index.js", Method::Get, |request| {
        let response = request.into_response(200, Some("OK"), &[("Content-Type", "text/javascript"), ("Content-Encoding", "gzip")]);
        //response?.write_all(include_bytes!("../../../docs/index.js.gz"))?;
        response?.write_all(include_bytes!("../../../docs/index.js.min.gz"))?;
        Ok(())
    })?;

    server.fn_handler("/zstd.js", Method::Get, |request| {
        let response = request.into_response(200, Some("OK"), &[("Content-Type", "text/javascript"), ("Content-Encoding", "gzip")]);
        response?.write_all(include_bytes!("../../../docs/zstd.js.min.gz"))?;
        Ok(())
    })?;

    server.fn_handler("/index.wasm", Method::Get, |request| {
        //let response = request.into_response(200, Some("OK"), &[("Content-Type", "application/wasm"), ("Content-Encoding", "gzip")]);
        //response?.write_all(include_bytes!("../../../docs/index_bg.wasm.gz"))?;
        let response = request.into_response(200, Some("OK"), &[("Content-Type", "application/wasm"), ("Content-Encoding", "zstd")]);
        response?.write_all(include_bytes!("../../../docs/index_bg.wasm.zst"))?;
        Ok(())
    })?;

    server.fn_handler("/favicon.ico", Method::Get, |request| {
        let response = request.into_response(200, Some("OK"), &[("Content-Type", "image/gif")]);
        response?.write_all(include_bytes!("../../../docs/favicon.gif"))?;
        Ok(())
    })?;

    server.fn_handler("/", Method::Post, move|mut request| {

        let header = request.header("Accept").unwrap().to_string();

        // Create a buffer to store the payload
        let mut buffer = [0; 1024];  // Adjust the size as needed

        // Read the payload into the buffer
        let bytes_read = request.read(&mut buffer)?;

        // Convert the bytes to a string
        let payload = std::str::from_utf8(&buffer[..bytes_read])?;

        println!("Received payload: {}", payload);

        match payload.trim() {
            "time" => {
                println!("Reporting time");
                // ... read system time and report it directly ...

                let response = request.into_response(200, Some("OK"), &[("Content-Type", "text/plain")]);
                response?.write_all(header.as_bytes())?;
                //response?.flush()?;
            },
            "status_on" => {
                println!("Turning status LED on");
                // ... Set pin 12/13 high ...
                status_led.lock().unwrap().set_high()?;

                let response = request.into_response(200, Some("Status on"), &[("Content-Type", "text/plain")]);
                response?.flush()?;
            },
            "status_off" => {
                println!("Turning status LED off");
                // ... Set pin 12/13 low ...
                status_led.lock().unwrap().set_low()?;

                let response = request.into_response(200, Some("Status off"), &[("Content-Type", "text/plain")]);
                response?.flush()?;
            },
            _ => {
                println!("Unknown command: {}", payload);
                // ... handle unknown command ...

                let response = request.into_response(200, Some("OK"), &[("Content-Type", "text/plain")]);
                response?.flush()?;
            },
        }

        Ok(())
    })?;

    println!("Server awaiting connection");

    // Prevent program from exiting
    loop {
        sleep(Duration::from_millis(1000));
    }
}

fn temperature(val: f32) -> String {
    format!("chip temperature: {:.2}°C", val)
}
