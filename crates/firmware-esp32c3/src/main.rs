use anyhow::Result;
use core::str;
use embedded_svc::{http::Method, http::Headers, io::Write};
use esp_idf_hal::{
    i2c::{I2cConfig, I2cDriver},
    prelude::*,
};
use esp_idf_svc::{
    eventloop::EspSystemEventLoop,
    http::server::{Configuration, EspHttpServer},
};
use shtcx::{self, shtc3, PowerMode};
use std::{
    sync::{Arc, Mutex},
    thread::sleep,
    time::Duration,
};
use embedded_svc::io::Read;
use esp_idf_hal::gpio::OutputPin;
use wifi::wifi;
// If using the `binstart` feature of `esp-idf-sys`, always keep this module imported
use esp_idf_sys as _;

#[toml_cfg::toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

fn main() -> Result<()> {
    esp_idf_sys::link_patches();
    esp_idf_svc::log::EspLogger::initialize_default();

    let peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take()?;

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    // Connect to the Wi-Fi network
    let _wifi = wifi(
        app_config.wifi_ssid,
        app_config.wifi_psk,
        peripherals.modem,
        sysloop,
    )?;

    // Initialize temperature sensor
    let sda = peripherals.pins.gpio10;
    let scl = peripherals.pins.gpio8;
    let i2c = peripherals.i2c0;
    let config = I2cConfig::new().baudrate(100.kHz().into());
    let i2c = I2cDriver::new(i2c, sda, scl, &config)?;
    let status_led_main = Arc::new(Mutex::new(esp_idf_hal::gpio::PinDriver::output(peripherals.pins.gpio12)?));
    let status_led = status_led_main.clone();

    /*
    let temp_sensor_main = Arc::new(Mutex::new(shtc3(i2c)));
    let mut temp_sensor = temp_sensor_main.clone();
    temp_sensor
        .lock()
        .unwrap()
        .start_measurement(PowerMode::NormalMode)
        .unwrap();
     */

    // 1.Create a `EspHttpServer` instance using a default configuration
    let mut server = EspHttpServer::new(&Default::default())?;

    // 2. Write a handler that returns the index page
    server.fn_handler("/", Method::Get, |request| {
        let response = request.into_response(200, Some("OK"), &[("Content-Type", "text/html"), ("Content-Encoding", "gzip")]);
        response?.write_all(include_bytes!("../../../docs/index.html.gz"))?;
        Ok(())
    })?;

    server.fn_handler("/index.js", Method::Get, |request| {
        let response = request.into_response(200, Some("OK"), &[("Content-Type", "text/javascript"), ("Content-Encoding", "gzip")]);
        response?.write_all(include_bytes!("../../../docs/index.js.gz"))?;
        Ok(())
    })?;

    server.fn_handler("/index.wasm", Method::Get, |request| {
        let response = request.into_response(200, Some("OK"), &[("Content-Type", "application/wasm"), ("Content-Encoding", "gzip")]);
        response?.write_all(include_bytes!("../../../docs/index_bg.wasm.gz"))?;
        Ok(())
    })?;

    server.fn_handler("/favicon.ico", Method::Get, |request| {
        let response = request.into_response(200, Some("OK"), &[("Content-Type", "image/gif")]);
        response?.write_all(include_bytes!("../../../docs/favicon.gif"))?;
        Ok(())
    })?;

    server.fn_handler("/", Method::Post, move|mut request| {

        let header = request.header("Accept").unwrap().to_string();

        // Create a buffer to store the payload
        let mut buffer = [0; 1024];  // Adjust the size as needed

        // Read the payload into the buffer
        let bytes_read = request.read(&mut buffer)?;

        // Convert the bytes to a string
        let payload = std::str::from_utf8(&buffer[..bytes_read])?;

        println!("Received payload: {}", payload);

        match payload.trim() {
            "time" => {
                println!("Reporting time");
                // ... read system time and report it directly ...

                let response = request.into_response(200, Some("OK"), &[("Content-Type", "text/plain")]);
                response?.write_all(header.as_bytes())?;
                //response?.flush()?;
            },
            "status_on" => {
                println!("Turning status LED on");
                // ... Set pin 12/13 high ...
                status_led.lock().unwrap().set_high()?;

                let response = request.into_response(200, Some("Status on"), &[("Content-Type", "text/plain")]);
                response?.flush()?;
            },
            "status_off" => {
                println!("Turning status LED off");
                // ... Set pin 12/13 low ...
                status_led.lock().unwrap().set_low()?;

                let response = request.into_response(200, Some("Status off"), &[("Content-Type", "text/plain")]);
                response?.flush()?;
            },
            _ => {
                println!("Unknown command: {}", payload);
                // ... handle unknown command ...

                let response = request.into_response(200, Some("OK"), &[("Content-Type", "text/plain")]);
                response?.flush()?;
            },
        }

        Ok(())
    })?;

    println!("Server awaiting connection");

    // Prevent program from exiting
    loop {
        sleep(Duration::from_millis(1000));
    }
}

fn temperature(val: f32) -> String {
    format!("chip temperature: {:.2}Â°C", val)
}
